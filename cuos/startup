--[[
Boots the OS by loading the most important functions. These include:

 - Loading all the core OS APIs
 - Setting up devices, and running the hotplugging service
 - Running the /init script
 - Dropping into the scheduler
--]]

-- We have to load the cuos module via os.loadAPI, since everybody must have it
-- to avoid having to bootstrap the `cuos.import` function themselves.
os.loadAPI("/lib/cuos")

-- Load up all the devices
local hotplug = cuos.import("hotplug")
hogplug.load_devices()

-- Loads the init script
shell.run('/init')

-- Run the scheduler
functools = cuos.import('func')

-- The most recent event
local event_data = nil
-- The events that each function cares about
local event_filters = {}
-- The functions which should be invoked
local invoked_processes = {}
-- Whether we've received the 'terminate' event or not
local is_terminated = false

-- The variable 'processes' is provided by the cuos module, which doesn't
-- localize it because we need it here.

while not is_terminated do
    if event_data ~= nil and event_data[1] == 'terminate' then
        is_terminated = true
    end

    -- Strip out any processes that don't need to be run
    invoked_processes = functools.filter(
            function(routine, _)
                return (
                    -- The first event is being triggered
                    event_data == nil or
                    -- The event is the same as the function wants
                    event_filters[routine] == event_data[1] or
                    -- The function wants any event
                    event_filters[routine] == "" or
                    -- The function hasn't been scheduled yet (and we
                    -- need to schedule it for the first time)
                    event_filters[routine] == nil)
            end,
            processes)
    
    -- Invoke all routines that need to be run
    functools.foreach(
        function(index, routine)
            local is_okay, param
            if event_data ~= nil then
                is_okay, param = coroutine.resume(routine,
                    unpack(event_data))
            else
                -- The first event has no event data
                is_okay, param = coroutine.resume(routine)
            end

            if not is_okay then
                error(param)
            else
                event_filters[routine] = param
            end
        end,
        invoked_processes)

    -- Prunes out all the dead routines
    processes = functools.filter(
        function(coro, _)
            -- Let other processes know that this one has ended
            if coroutine.status(coro) == "dead" then
                os.queueEvent("process_died", coro)
            end
            return coroutine.status(coro) ~= "dead"
        end,
        processes)

    event_filters = functools.filter(
        function(coro, _)
            return coroutine.status(coro) ~= "dead"
        end,
        event_filters)

    event_data = {os.pullEventRaw()}
end

-- If everybody is dead, then go ahead and shut the machine off
os.shutdown()

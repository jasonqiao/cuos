--[[
Core operating system utilities.
--]]
function import(lib)
    local filename = lib .. ".lua"
    os.loadAPI("/lib/" .. filename)

    -- os.loadAPI butchers the name, so we have to fix it
    local module = _G[filename]
    _G[filename] = nil
    _G[lib] = module
end

function deport(lib)
    os.unloadAPI(lib)
end

-- Used by the scheduler, and the execution functions defined below
local processes = {}

function execute(func, ...)
    local wrapper_args = {...}
    local function wrapper()
        return func(unpack(wrapper_args))
    end

    local coro = coroutine.create(wrapper)
    processes[coro] = true

    -- Since the scheduler only reschedules a process when an event fires, we
    -- need to signal that it needs to run this new process for the first
    -- time. This notifies the scheduler without really doing anything.
    sleep(1)

    while coroutine.status(coro) ~= "dead" do
        -- This is a synthetic event, which is produced by the scheduler to
        -- notify the death of a process. Although it returns the process,
        -- the loop already tests to see if our process is dead, so
        -- don't bother testing it twice
        os.pullEvent('process_died')
    end
end

function daemon(func, ...)
    local wrapper_args = {...}
    local function wrapper()
        func(unpack(wrapper_args))
    end

    local coro = coroutine.create(wrapper)
    processes[coro] = true

    -- Since the scheduler only reschedules a process when an event fires, we
    -- need to signal that it needs to run this new process for the first
    -- time. This notifies the scheduler without really doing anything.
    sleep(0)

    return coro
end

function run_script(filename)
    local handle = fs.open(filename, 'r')
    if handle == nil then
        error('Cannot run the script ' .. filename)
    else
        local line = handle.readLine()
        shell.run(line)
    end
end

function dev(filename)
    local handle = loadfile(filename)
    if handle == nil then
        return nil
    else
        return handle()
    end
end

function get_peripheral(type)
    for _, filename in pairs(fs.list('/dev')) do
        if string.match(filename, type .. '[LRTUFB]') then
            return '/dev/' .. filename
        end
    end
    return nil
end

function scheduler()
    -- The most recent event
    local event_data = nil
    -- The events that each function cares about
    local event_filters = {}
    -- The functions which should be invoked
    local invoked_processes = {}
    -- Whether we've received the 'terminate' event or not
    local is_terminated = false

    while not is_terminated do
        if event_data ~= nil and event_data[1] == 'terminate' then
            is_terminated = true
        end

        -- Strip out any processes that don't need to be run
        invoked_processes = func.filter(
                function(routine, _)
                    return (
                        -- The first event is being triggered
                        event_data == nil or
                        -- The event is the same as the function wants
                        event_filters[routine] == event_data[1] or
                        -- The function wants any event
                        event_filters[routine] == "" or
                        -- The function hasn't been scheduled yet (and we
                        -- need to schedule it for the first time)
                        event_filters[routine] == nil)
                end,
                processes)

        -- Invoke all routines that need to be run
        func.foreach(
            function(routine, _)
                local is_okay, param
                if event_data ~= nil then
                    is_okay, param = coroutine.resume(routine,
                        unpack(event_data))
                else
                    -- The first event has no event data
                    is_okay, param = coroutine.resume(routine)
                end

                if not is_okay then
                    event_filters[routine] = nil
                    processes[routine] = nil

                    term.setTextColor(colors.red)
                    print(param)
                    term.setTextColor(colors.white)
                else
                    event_filters[routine] = param
                end
            end,
            invoked_processes)

        -- Prunes out all the dead routines
        processes = func.filter(
            function(coro, _)
                -- Let other processes know that this one has ended
                if coroutine.status(coro) == "dead" then
                    os.queueEvent("process_died", coro)
                end
                return coroutine.status(coro) ~= "dead"
            end,
            processes)

        event_filters = func.filter(
            function(coro, _)
                return coroutine.status(coro) ~= "dead"
            end,
            event_filters)

        event_data = {os.pullEventRaw()}
    end
end

-- The OS initialization routine gets this for us
shell = {}

function run_shell()
    local command = ""
    local done = false

    --shell.run('clear')
    print("CUOS Shell")

    while not done do
        local prompt = string.format("<</%s @ %d>>",
                shell.dir(), 
                os.getComputerID())

        term.setTextColor(colors.orange)
        print(prompt)
        term.write("> ")
        term.setTextColor(colors.white)
        command = read()

        first_word = string.gsub(command, "%s*(%S+)%s?.*", "%1")
        if first_word == "exit" then
            done = true
        else
            pcall(shell.run(command))
        end
    end
end
